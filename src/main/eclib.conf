#
# eclib - Spark Evolutionary Computing Library
# Copyright © 2022 Xoán C. Pardo (xoan.pardo@udc.gal)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# This file documents the format of the configuration file
#

#eclib_configuration { // not needed in pureconfig for Scala 2.12.x

	execution_framework {	// optional. Default to no framework (sequential)
							// only 1 has to be defined with the parameters of the selected framework
		name = 		    // Spark
		job_name = 	    // Spark job name
		local_run = 	// Default: true
		workers =		// Default: 1 -> not used by now

	}

  	libraries {		// optional. Default to no external libraries

  		sacess_home =  	    // home dir of the sacess library (benchmarks located in ${sacess_home}/benchmarks)
  		sbeclib_file =  	// System Biology library file (Default: ${sacess_home}/eclib/lib/libSBeclib.so)

  	}
				
	experiments = [
	
		{
			name =
			description =   	// optional
			repetitions =		// Default: 1
			population_size =

#	        metaheuristic {

            algorithm {
                name =   // ParticleSwarm
                #particle.swarm {
                    implementation.name = // PSO variants: Sequential, MWEvaluateOnly, MWMoveAndEvaluate, Islands (alternative sintax: implementation { name = ... }). Default: Sequential

                    #implementation {
                      name = // Sequential, MWEvaluateOnly, MWMoveAndEvaluate
                      conf {
                        topology = // see topologies
                        strategies = // see strategies
                      }
                    #}

                    #implementation {
                      name = Islands
                      local_iterations =
                      conf {
                        as_percentage = // boolean. Consider amounts in islands as amounts or percentages. Default false
                        islands = [
                            {
                                amount = // amount or percentage of islands of this type
                                conf {
                                  topology = // see topologies
                                  strategies = // see strategies
                                }
                            }*
                        ]
                      }
                    #}

                    #topology
                    # -- used in the conf attribute of islands and in implementations with a single configuration
                    topology {
                        self =     // Boolean. Whether or not to regard nodes to be members of their neighborhood. (alternative sintax: topology.self = ) Default: true
                        shape.name =   // Global, Star, Pyramid, Linear, Complete, Wheel, ScaleFreeNetwork (alternative sintax: shape { name = ... }). Default: Global
                        #shape {
                            name = // Topologies with k parameter: DirectedRing, Ring, Regular, KClusters, GeneralizedPetersen, RegularRandom
                            k = // Usually degree, but it has different meanings depending on the topology. Default: 1 for DirectedRing, Ring, GeneralizedPetersen
                        #}
                        #shape {
                            name = HyperCube
                            dim = // 2^dim has to be equal to the population size
                        #}
                        #shape {
                            name = // Topologies with m parameter: GnmRandom, Windmill, DutchWindmill
                            m = // edges in GnmRandom, copies of the complete graph in Windmill, copies of the cycle graph in DutchWindmill
                        #}
                        #shape {
                            name = GRandom
                            d_min = // minimum degree. Because the topology is a connected graph it must be >= 2
                            d_max = // maximum degree
                        #}
                        #shape {
                            name = // 2D topologies: Square, Grid
                            rows =
                            cols =
                        #}
                        #shape {
                            name = GnpRandomBipartite
                            n_1 =
                            n_2 =
                            p =
                        #}
                        #shape {
                            name = PlantedPartition
                            l =
                            p =
                            q =
                        #}
                        #shape {
                            name = KleinbergSmallWorld
                            p =
                            q =
                            r =
                        #}
                        #shape {
                            name = ScaleFree
                            alfa =
                            gamma =
                            delta_in =
                            delta_out =
                        #}
                        #shape {
                            name = Custom
                            neighborhoods = // map(Node, Neighbors) = map[Int, Vector[Int]]
                            // Example (Star with 6 particles): { 0: [], 1: [0], 2: [0], 3: [0], 4: [0], 5: [0] }
                            // Example (Ring(1) with 6 particles: { 0: [1, 5], 1: [2, 0], 2: [3, 1], 3: [4, 2], 4: [5, 3], 5: [0, 4] }
                        #}
                        #shape {
                            name = CustomFromDotFile
                            file = // path to the file that stores the custom topology in DOT format
                        #}
                        // FIPS variants are those described in [Mendes et al, 2004]
                        // to configure Self and wSelf variants use the following parameters:
                        //      neighborhood_influence.name = FIPS (for Self) or wFIPS (for wSelf)
                        //      velocity_update.name = ConstrictionFactor (use the same value for c1 and c2 to have a 50% contribution of the particle´s own best)
                        //      self = false (setting self=true increases the contribution of the particle´s own best because it is also taken into account in the calculation of its neighborhood influence)
                        // Note that it is also possible to use the Standard velocity update with appropriate parameters
                        neighborhood_influence.name = // optional. Best, FIPS, wFIPS, wdFIPS. Default: Best. (alternative sintax: neighborhood_influence { name = ... })
                    }

                    #strategies
                    # -- used in the conf attribute of islands and in implementations with a single configuration
                    strategies {
                        velocity_intialization.name = // Zero, Bounded (alternative sintax: velocity_intialization { name = ... }). Default: Zero
                        #velocity_intialization {
                            name = Bounded // velocity bounds are calculated from the search space limits using a reduction factor
                            factor = // 0.0 <= factor <= 1.0. Default value: 1.0 (velocity bounds are the same as the search space limits)
                        #}
                        velocity_update.name = // optional. Update formula to update the velocity: Standard, ConstrictionFactor, CondensedConstrictionFactor. Default: Standard. (alternative sintax: velocity_update { name = ... }).
                        #velocity_update {
                            name = Standard
                            w =  // inertia coeficient. w >= 0.0. Default: 1.0
                            c_1 = // cognitive coeficient. c1 >= 0.0. Default: 2.0
                            c_2 = // social coeficient. c2 >= 0.0. Default: 2.0
                            strategies {
                                inertia_weight_adjustment.name = // Optional. Default: None(=Constant). (alternative sintax: inertia_weight_adjustment { name = ... }).
                                                                 // Values: LinearDecreasingTime, LinearDecreasingGenerations, Random, ChaoticTime, ChaoticGenerations, ChaoticRandom
                                inertia_weight_adjustment.w_min = // mandatory for LinearDecreasingTime, LinearDecreasingGenerations, ChaoticTime, ChaoticGenerations
                                                                  // It has to be lower than the w initial value and one of termination_criteria.max_generations or max_time has to be configured depending on the specific strategy
                            }
                        #}
                        #velocity_update {
                            name = ConstrictionFactor
                            c_1 = // cognitive coeficient. c1 >= 0.0. Default [Clerc&Kennedy, 2002]: 2.05
                            c_2 = // social coeficient. c2 >= 0.0. Default [Clerc&Kennedy, 2002]: 2.05                        }
                        #}
                        #velocity_update {
                            name = CondensedConstrictionFactor // [Clerc&Kennedy, 2002][Mendes et al. 2004]
                            cmax =
                        #}
                        velocity_limit { // optional. Default to no limit
                            vmax = [] // Default: []. A vector of dimension constant values or only 1 in condensed syntax.
                                      // It must be defined if a vmax_initialization strategy is not provided and be empty [] if it is provided
                            vmax_initialization.name = // Optional. Values: Factor (alternative sintax: vmax_initialization { name = ... })
                            #vmax_initialization {
                                name = Factor
                                k = // k > 0.0 && k <= 1.0. Vmax = k*(Xmax-Xmin)/2
                            #}
                            vmax_reduce.name = // Optional. Values: LDVM (alternative sintax: vmax_reduce { name = ... })
                            #vmax_reduce {
                                name = LDVM // Schutte et al. Linearly Decreasing method (LDVM). It also updates w,
                                            // so no other w adjustment strategy can be defined at the same time
                                h = // h > 0. Check every h generations if vmax and inertial coeficient should be reduced
                                alfa = // alfa > 0.0 && alfa < 1.0
                                beta = // beta > 0.0 && beta < 1.0
                            #}
                        }
                        movement_limit.name = // optional. Values: SearchSpace (bound position to search space limits and reset velocity to 0)
                                              // (alternative sintax: movement_limit { name = ... })
                    }
                #}
            }

#            }
			
			#Evaluation function: Sphere, Elliptic, Schwefel, Rosenbrock, Rastrigin, Ackley, Griewank, Schaffer_f6, Schaffer_N2, Schaffer_N4
			#SBECLib models: Circadian, Mendes, Nfkb, B1-B5
            #LSGO2013 functions: LSGO2013_F1, .., LSGO2013_F15
			evaluation_function =

			element_generation {
				method =        // Random
			    parallelism =   // Sequential, Parallel. Default: Sequential. Parallel only works with Spark context.
			}

			search_space {
				dimensions =
				lower_limits = [] // Optional. Default to no limits (lower = upper = [])
				upper_limits = [] // Optional. Default to no limits (lower = upper = [])
			}
			
			termination_criteria {
				target_value = 		// VTR. Default: MIN_DOUBLE
				max_evaluations =	// Default: MAX_LONG
				max_generations =	// Default: MAX_INT
				max_time =			// Default: Infinite (seconds)
                stagnation {	// optional. Default to no stagnation check
                  generations = // Number of generations without improvement to consider that the optimization is stagnated
                  improvement = // Default = 0.0. Minimum fitness improvement between two consecutive generations to consider that the optimization is NOT stagnated
                }
			}
		}
	
		{
			#Another experiment
		}
	]
#}