#
# eclib - Spark Evolutionary Computing Library
# Copyright © 2022 Xoán C. Pardo (xoan.pardo@udc.gal)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#####################################
## added for testing on kubernetes ##
#####################################
execution_framework {
    name = Spark
    job_name = PSO test
    local_run = false
    workers = 1
}
#libraries {
#    sacess_home = /tmp/eclib
#    sbeclib_file = libSBeclib.so
#}
#####################################
experiments = [

    {
      name = Particle Swarm Optimization (Scala)
      description = Master-Worker (move and evaluate)
#      description = Master-Worker (evaluate only)
#      description = Islands
      repetitions = 1
#      population_size = 1000
      population_size = 10
      algorithm {
        name = ParticleSwarm
	implementation.name = MWMoveAndEvaluate
#	implementation.name = MWEvaluateOnly
        implementation.conf {
#          topology = {
#            self = false
#            shape.name = Complete
#            neighborhood_influence.name = wdFIPS
#          }
          topology = {
#            self = true
            self = false
            shape.name = Global
            neighborhood_influence.name = Best 
          }
          strategies {
#            velocity_initialization.name = Bounded
#            velocity_initialization.factor = 0.8
            velocity_update {
              name = Standard
              w = 0.7298
              c_1 = 2.05
              c_2 = 2.05
            }
            velocity_limit {
                vmax = [10.0]
#                vmax_initialization {
#                    name = Factor
#                    k = 0.4
#                }
                vmax_reduce {
                    name = LDVM
                    h = 5
                    alfa = 0.9
                    beta = 0.5
                }
            }
#            movement_limit.name = SearchSpace
          }
        }
      }
##      evaluation_function = Circadian
      evaluation_function = Sphere
##      evaluation_function = LSGO2013_F14
      element_generation {
        method = Random
        parallelism = Sequential
#        parallelism = Parallel
      }
      search_space {
#        dimensions = 1000
        dimensions = 5
        lower_limits = [-5.0]
        upper_limits = [5.0]
#        dimensions = 50
#        lower_limits = [-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0,-5.0]
#        upper_limits = [5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0]
#        dimensions = 10
#        lower_limits = [-10.0]
#        upper_limits = [10.0]
      }
      termination_criteria {
#        max_generations = 100
        max_generations = 10
        target_value = 0.0
#       target_value = -1e-5
#        max_evaluations = 1000
#        max_time = 5s
#        max_time = 1000m
        stagnation {
          generations = 5
          improvement = 0.0000001
        }
      }
    }
]
