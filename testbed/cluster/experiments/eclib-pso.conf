#
# eclib - Spark Evolutionary Computing Library
# Copyright © 2022 Xoán C. Pardo (xoan.pardo@udc.gal)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#############################
##   iteration time test   ##
#############################

include required(file("eclib-params.conf"))

# -------------
# Spark context
# -------------

execution_framework {
    name = Spark
    job_name = ${job_name}
    local_run = false
#    workers = 1
}

# ---------
# Functions
# ---------

Function {
    TerminationCondition {
      Common {
        max_generations = ${generations}
        stagnation {
          generations = ${generations}
          improvement = 0.000001
        }
      }
    }
    Sphere {
        evaluation_function = Sphere
        search_space {
            dimensions = 1000
#            lower_limits = [50]
            lower_limits = [-100]
            upper_limits = [100]
        }
        termination_criteria = { target_value = 0.01 } ${Function.TerminationCondition.Common}
    }
    Rastrigin {
        evaluation_function = Rastrigin
        search_space {
            dimensions = 1000
#            lower_limits = [2.56]
            lower_limits = [-5.12]
            upper_limits = [5.12]
        }
        termination_criteria = { target_value = 100 } ${Function.TerminationCondition.Common}
    }
    Griewank {
        evaluation_function = Griewank
        search_space {
            dimensions = 1000
#            lower_limits = [300]
            lower_limits = [-600]
            upper_limits = [600]
        }
        termination_criteria = { target_value = 0.05 } ${Function.TerminationCondition.Common}
    }
    Rosenbrock {
        evaluation_function = Rosenbrock
        search_space {
            dimensions = 1000
#            lower_limits = [15]
            lower_limits = [-30]
            upper_limits = [30]
        }
        termination_criteria = { target_value = 100 } ${Function.TerminationCondition.Common}
    }
}

# --------------
# Configurations
# --------------

Configuration {
    Common {
       topology = {
         #  self = true
         self = false
         #  shape.name = Global
         shape.name = Complete
         neighborhood_influence.name = Best 
       }
       strategies {
         velocity_update {
           name = Standard
           w = 0.7298
           c_1 = 2.05
           c_2 = 2.05
         }
         velocity_limit {
           vmax = [10.0]
           vmax_reduce {
             name = LDVM
             h = 5
             alfa = 0.9
             beta = 0.5
           }
         }
       }
    }
}

# ----------
# Algorithms
# ----------

Algorithm {
    MWEvaluateOnly {
      name = MWEvaluateOnly
      conf = ${Configuration.Common}
    }
    MWMoveAndEvaluate {
      name = MWMoveAndEvaluate
      conf = ${Configuration.Common}
    }
    Islands {
      name = Islands
      local_iterations = ${island_iterations}
      conf {
        as_percentage = true
        islands = [
          {
            amount = 100
            conf = ${Configuration.Common}
          }
        ]
      }
    }

    0: { algorithm = { name = ParticleSwarm } { implementation = ${Algorithm.MWEvaluateOnly} } }
    1: { algorithm = { name = ParticleSwarm } { implementation = ${Algorithm.MWMoveAndEvaluate} } }
    2: { algorithm = { name = ParticleSwarm } { implementation = ${Algorithm.Islands} } }
}

# -----------
# Experiments
# -----------

Experiment {
    Common {
      name = PSO template
      description = ${description}
      repetitions = ${repetitions}
      population_size = ${population}
      element_generation {
        method = Random
        parallelism = Sequential
      }
    }
}

experiments = [
   # MWEvaluateOnly
#   ${Experiment.Common} ${Algorithm.0} ${Function.Sphere}
#   ${Experiment.Common} ${Algorithm.0} ${Function.Rastrigin}
#   ${Experiment.Common} ${Algorithm.0} ${Function.Griewank}
#   ${Experiment.Common} ${Algorithm.0} ${Function.Rosenbrock}

   # MWMoveAndEvaluate
#   ${Experiment.Common} ${Algorithm.1} ${Function.Sphere}
#   ${Experiment.Common} ${Algorithm.1} ${Function.Rastrigin}
#   ${Experiment.Common} ${Algorithm.1} ${Function.Griewank}
#   ${Experiment.Common} ${Algorithm.1} ${Function.Rosenbrock}

   # Islands
   ${Experiment.Common} ${Algorithm.2} ${Function.Sphere}
#   ${Experiment.Common} ${Algorithm.2} ${Function.Rastrigin}
#   ${Experiment.Common} ${Algorithm.2} ${Function.Griewank}
#   ${Experiment.Common} ${Algorithm.2} ${Function.Rosenbrock}
]
